/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.impl;

import com.btc.serviceidl.idl.AbstractInterfaceComponent;
import com.btc.serviceidl.idl.DocCommentElement;
import com.btc.serviceidl.idl.IdlPackage;
import com.btc.serviceidl.idl.InterfaceDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interface Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getDocComments <em>Doc Comments</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getGuid <em>Guid</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getDerivesFrom <em>Derives From</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.InterfaceDeclarationImpl#getContains <em>Contains</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InterfaceDeclarationImpl extends AbstractModuleComponentImpl implements InterfaceDeclaration
{
  /**
   * The cached value of the '{@link #getDocComments() <em>Doc Comments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocComments()
   * @generated
   * @ordered
   */
  protected EList<DocCommentElement> docComments;

  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The default value of the '{@link #getGuid() <em>Guid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuid()
   * @generated
   * @ordered
   */
  protected static final String GUID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGuid() <em>Guid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuid()
   * @generated
   * @ordered
   */
  protected String guid = GUID_EDEFAULT;

  /**
   * The cached value of the '{@link #getDerivesFrom() <em>Derives From</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDerivesFrom()
   * @generated
   * @ordered
   */
  protected EList<InterfaceDeclaration> derivesFrom;

  /**
   * The cached value of the '{@link #getContains() <em>Contains</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContains()
   * @generated
   * @ordered
   */
  protected EList<AbstractInterfaceComponent> contains;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InterfaceDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IdlPackage.Literals.INTERFACE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DocCommentElement> getDocComments()
  {
    if (docComments == null)
    {
      docComments = new EObjectContainmentEList<DocCommentElement>(DocCommentElement.class, this, IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS);
    }
    return docComments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.INTERFACE_DECLARATION__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.INTERFACE_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.INTERFACE_DECLARATION__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getGuid()
  {
    return guid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGuid(String newGuid)
  {
    String oldGuid = guid;
    guid = newGuid;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.INTERFACE_DECLARATION__GUID, oldGuid, guid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InterfaceDeclaration> getDerivesFrom()
  {
    if (derivesFrom == null)
    {
      derivesFrom = new EObjectResolvingEList<InterfaceDeclaration>(InterfaceDeclaration.class, this, IdlPackage.INTERFACE_DECLARATION__DERIVES_FROM);
    }
    return derivesFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractInterfaceComponent> getContains()
  {
    if (contains == null)
    {
      contains = new EObjectContainmentEList<AbstractInterfaceComponent>(AbstractInterfaceComponent.class, this, IdlPackage.INTERFACE_DECLARATION__CONTAINS);
    }
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS:
        return ((InternalEList<?>)getDocComments()).basicRemove(otherEnd, msgs);
      case IdlPackage.INTERFACE_DECLARATION__CONTAINS:
        return ((InternalEList<?>)getContains()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS:
        return getDocComments();
      case IdlPackage.INTERFACE_DECLARATION__ABSTRACT:
        return isAbstract();
      case IdlPackage.INTERFACE_DECLARATION__NAME:
        return getName();
      case IdlPackage.INTERFACE_DECLARATION__VERSION:
        return getVersion();
      case IdlPackage.INTERFACE_DECLARATION__GUID:
        return getGuid();
      case IdlPackage.INTERFACE_DECLARATION__DERIVES_FROM:
        return getDerivesFrom();
      case IdlPackage.INTERFACE_DECLARATION__CONTAINS:
        return getContains();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS:
        getDocComments().clear();
        getDocComments().addAll((Collection<? extends DocCommentElement>)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__VERSION:
        setVersion((String)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__GUID:
        setGuid((String)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__DERIVES_FROM:
        getDerivesFrom().clear();
        getDerivesFrom().addAll((Collection<? extends InterfaceDeclaration>)newValue);
        return;
      case IdlPackage.INTERFACE_DECLARATION__CONTAINS:
        getContains().clear();
        getContains().addAll((Collection<? extends AbstractInterfaceComponent>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS:
        getDocComments().clear();
        return;
      case IdlPackage.INTERFACE_DECLARATION__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case IdlPackage.INTERFACE_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IdlPackage.INTERFACE_DECLARATION__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case IdlPackage.INTERFACE_DECLARATION__GUID:
        setGuid(GUID_EDEFAULT);
        return;
      case IdlPackage.INTERFACE_DECLARATION__DERIVES_FROM:
        getDerivesFrom().clear();
        return;
      case IdlPackage.INTERFACE_DECLARATION__CONTAINS:
        getContains().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.INTERFACE_DECLARATION__DOC_COMMENTS:
        return docComments != null && !docComments.isEmpty();
      case IdlPackage.INTERFACE_DECLARATION__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case IdlPackage.INTERFACE_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IdlPackage.INTERFACE_DECLARATION__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case IdlPackage.INTERFACE_DECLARATION__GUID:
        return GUID_EDEFAULT == null ? guid != null : !GUID_EDEFAULT.equals(guid);
      case IdlPackage.INTERFACE_DECLARATION__DERIVES_FROM:
        return derivesFrom != null && !derivesFrom.isEmpty();
      case IdlPackage.INTERFACE_DECLARATION__CONTAINS:
        return contains != null && !contains.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", name: ");
    result.append(name);
    result.append(", version: ");
    result.append(version);
    result.append(", guid: ");
    result.append(guid);
    result.append(')');
    return result.toString();
  }

} //InterfaceDeclarationImpl
