/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.impl;

import com.btc.serviceidl.idl.AbstractModuleComponent;
import com.btc.serviceidl.idl.IdlPackage;
import com.btc.serviceidl.idl.ModuleDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Module Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.btc.serviceidl.idl.impl.ModuleDeclarationImpl#isVirtual <em>Virtual</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.ModuleDeclarationImpl#isMain <em>Main</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.ModuleDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.ModuleDeclarationImpl#getModuleComponents <em>Module Components</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.ModuleDeclarationImpl#getNestedModules <em>Nested Modules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModuleDeclarationImpl extends MinimalEObjectImpl.Container implements ModuleDeclaration
{
  /**
   * The default value of the '{@link #isVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVirtual()
   * @generated
   * @ordered
   */
  protected static final boolean VIRTUAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVirtual()
   * @generated
   * @ordered
   */
  protected boolean virtual = VIRTUAL_EDEFAULT;

  /**
   * The default value of the '{@link #isMain() <em>Main</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMain()
   * @generated
   * @ordered
   */
  protected static final boolean MAIN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMain() <em>Main</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMain()
   * @generated
   * @ordered
   */
  protected boolean main = MAIN_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getModuleComponents() <em>Module Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModuleComponents()
   * @generated
   * @ordered
   */
  protected EList<AbstractModuleComponent> moduleComponents;

  /**
   * The cached value of the '{@link #getNestedModules() <em>Nested Modules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedModules()
   * @generated
   * @ordered
   */
  protected EList<ModuleDeclaration> nestedModules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModuleDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IdlPackage.Literals.MODULE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isVirtual()
  {
    return virtual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVirtual(boolean newVirtual)
  {
    boolean oldVirtual = virtual;
    virtual = newVirtual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.MODULE_DECLARATION__VIRTUAL, oldVirtual, virtual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isMain()
  {
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMain(boolean newMain)
  {
    boolean oldMain = main;
    main = newMain;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.MODULE_DECLARATION__MAIN, oldMain, main));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.MODULE_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractModuleComponent> getModuleComponents()
  {
    if (moduleComponents == null)
    {
      moduleComponents = new EObjectContainmentEList<AbstractModuleComponent>(AbstractModuleComponent.class, this, IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS);
    }
    return moduleComponents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ModuleDeclaration> getNestedModules()
  {
    if (nestedModules == null)
    {
      nestedModules = new EObjectContainmentEList<ModuleDeclaration>(ModuleDeclaration.class, this, IdlPackage.MODULE_DECLARATION__NESTED_MODULES);
    }
    return nestedModules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS:
        return ((InternalEList<?>)getModuleComponents()).basicRemove(otherEnd, msgs);
      case IdlPackage.MODULE_DECLARATION__NESTED_MODULES:
        return ((InternalEList<?>)getNestedModules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IdlPackage.MODULE_DECLARATION__VIRTUAL:
        return isVirtual();
      case IdlPackage.MODULE_DECLARATION__MAIN:
        return isMain();
      case IdlPackage.MODULE_DECLARATION__NAME:
        return getName();
      case IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS:
        return getModuleComponents();
      case IdlPackage.MODULE_DECLARATION__NESTED_MODULES:
        return getNestedModules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IdlPackage.MODULE_DECLARATION__VIRTUAL:
        setVirtual((Boolean)newValue);
        return;
      case IdlPackage.MODULE_DECLARATION__MAIN:
        setMain((Boolean)newValue);
        return;
      case IdlPackage.MODULE_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS:
        getModuleComponents().clear();
        getModuleComponents().addAll((Collection<? extends AbstractModuleComponent>)newValue);
        return;
      case IdlPackage.MODULE_DECLARATION__NESTED_MODULES:
        getNestedModules().clear();
        getNestedModules().addAll((Collection<? extends ModuleDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.MODULE_DECLARATION__VIRTUAL:
        setVirtual(VIRTUAL_EDEFAULT);
        return;
      case IdlPackage.MODULE_DECLARATION__MAIN:
        setMain(MAIN_EDEFAULT);
        return;
      case IdlPackage.MODULE_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS:
        getModuleComponents().clear();
        return;
      case IdlPackage.MODULE_DECLARATION__NESTED_MODULES:
        getNestedModules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.MODULE_DECLARATION__VIRTUAL:
        return virtual != VIRTUAL_EDEFAULT;
      case IdlPackage.MODULE_DECLARATION__MAIN:
        return main != MAIN_EDEFAULT;
      case IdlPackage.MODULE_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IdlPackage.MODULE_DECLARATION__MODULE_COMPONENTS:
        return moduleComponents != null && !moduleComponents.isEmpty();
      case IdlPackage.MODULE_DECLARATION__NESTED_MODULES:
        return nestedModules != null && !nestedModules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (virtual: ");
    result.append(virtual);
    result.append(", main: ");
    result.append(main);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ModuleDeclarationImpl
