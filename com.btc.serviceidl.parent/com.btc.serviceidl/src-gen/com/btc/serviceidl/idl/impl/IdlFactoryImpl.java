/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.impl;

import com.btc.serviceidl.idl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IdlFactoryImpl extends EFactoryImpl implements IdlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IdlFactory init()
  {
    try
    {
      IdlFactory theIdlFactory = (IdlFactory)EPackage.Registry.INSTANCE.getEFactory(IdlPackage.eNS_URI);
      if (theIdlFactory != null)
      {
        return theIdlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IdlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IdlPackage.IDL_SPECIFICATION: return createIDLSpecification();
      case IdlPackage.IMPORT_DECLARATION: return createImportDeclaration();
      case IdlPackage.MODULE_DECLARATION: return createModuleDeclaration();
      case IdlPackage.ABSTRACT_MODULE_COMPONENT: return createAbstractModuleComponent();
      case IdlPackage.ABSTRACT_EXCEPTION: return createAbstractException();
      case IdlPackage.EXCEPTION_REFERENCE_DECLARATION: return createExceptionReferenceDeclaration();
      case IdlPackage.EXCEPTION_DECLARATION: return createExceptionDeclaration();
      case IdlPackage.ABSTRACT_TYPE_DECLARATION: return createAbstractTypeDeclaration();
      case IdlPackage.ABSTRACT_CROSS_REFERENCE: return createAbstractCrossReference();
      case IdlPackage.ABSTRACT_TYPE: return createAbstractType();
      case IdlPackage.ALIAS_DECLARATION: return createAliasDeclaration();
      case IdlPackage.ENUM_DECLARATION: return createEnumDeclaration();
      case IdlPackage.ABSTRACT_COLLECTION: return createAbstractCollection();
      case IdlPackage.SEQUENCE_DECLARATION: return createSequenceDeclaration();
      case IdlPackage.ABSTRACT_SEQUENCE_HINT: return createAbstractSequenceHint();
      case IdlPackage.TYPICAL_LENGTH_HINT: return createTypicalLengthHint();
      case IdlPackage.TYPICAL_SIZE_HINT: return createTypicalSizeHint();
      case IdlPackage.TUPLE_DECLARATION: return createTupleDeclaration();
      case IdlPackage.STRUCT_DECLARATION: return createStructDeclaration();
      case IdlPackage.MEMBER_ELEMENT: return createMemberElement();
      case IdlPackage.KEY_ELEMENT: return createKeyElement();
      case IdlPackage.INTERFACE_DECLARATION: return createInterfaceDeclaration();
      case IdlPackage.ABSTRACT_INTERFACE_COMPONENT: return createAbstractInterfaceComponent();
      case IdlPackage.FUNCTION_DECLARATION: return createFunctionDeclaration();
      case IdlPackage.EVENT_DECLARATION: return createEventDeclaration();
      case IdlPackage.RETURN_TYPE_ELEMENT: return createReturnTypeElement();
      case IdlPackage.PARAMETER_ELEMENT: return createParameterElement();
      case IdlPackage.DOC_COMMENT_ELEMENT: return createDocCommentElement();
      case IdlPackage.PRIMITIVE_TYPE: return createPrimitiveType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case IdlPackage.PARAMETER_DIRECTION:
        return createParameterDirectionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case IdlPackage.PARAMETER_DIRECTION:
        return convertParameterDirectionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDLSpecification createIDLSpecification()
  {
    IDLSpecificationImpl idlSpecification = new IDLSpecificationImpl();
    return idlSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportDeclaration createImportDeclaration()
  {
    ImportDeclarationImpl importDeclaration = new ImportDeclarationImpl();
    return importDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleDeclaration createModuleDeclaration()
  {
    ModuleDeclarationImpl moduleDeclaration = new ModuleDeclarationImpl();
    return moduleDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractModuleComponent createAbstractModuleComponent()
  {
    AbstractModuleComponentImpl abstractModuleComponent = new AbstractModuleComponentImpl();
    return abstractModuleComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractException createAbstractException()
  {
    AbstractExceptionImpl abstractException = new AbstractExceptionImpl();
    return abstractException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExceptionReferenceDeclaration createExceptionReferenceDeclaration()
  {
    ExceptionReferenceDeclarationImpl exceptionReferenceDeclaration = new ExceptionReferenceDeclarationImpl();
    return exceptionReferenceDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExceptionDeclaration createExceptionDeclaration()
  {
    ExceptionDeclarationImpl exceptionDeclaration = new ExceptionDeclarationImpl();
    return exceptionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractTypeDeclaration createAbstractTypeDeclaration()
  {
    AbstractTypeDeclarationImpl abstractTypeDeclaration = new AbstractTypeDeclarationImpl();
    return abstractTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCrossReference createAbstractCrossReference()
  {
    AbstractCrossReferenceImpl abstractCrossReference = new AbstractCrossReferenceImpl();
    return abstractCrossReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractType createAbstractType()
  {
    AbstractTypeImpl abstractType = new AbstractTypeImpl();
    return abstractType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasDeclaration createAliasDeclaration()
  {
    AliasDeclarationImpl aliasDeclaration = new AliasDeclarationImpl();
    return aliasDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumDeclaration createEnumDeclaration()
  {
    EnumDeclarationImpl enumDeclaration = new EnumDeclarationImpl();
    return enumDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCollection createAbstractCollection()
  {
    AbstractCollectionImpl abstractCollection = new AbstractCollectionImpl();
    return abstractCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SequenceDeclaration createSequenceDeclaration()
  {
    SequenceDeclarationImpl sequenceDeclaration = new SequenceDeclarationImpl();
    return sequenceDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractSequenceHint createAbstractSequenceHint()
  {
    AbstractSequenceHintImpl abstractSequenceHint = new AbstractSequenceHintImpl();
    return abstractSequenceHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypicalLengthHint createTypicalLengthHint()
  {
    TypicalLengthHintImpl typicalLengthHint = new TypicalLengthHintImpl();
    return typicalLengthHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypicalSizeHint createTypicalSizeHint()
  {
    TypicalSizeHintImpl typicalSizeHint = new TypicalSizeHintImpl();
    return typicalSizeHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleDeclaration createTupleDeclaration()
  {
    TupleDeclarationImpl tupleDeclaration = new TupleDeclarationImpl();
    return tupleDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StructDeclaration createStructDeclaration()
  {
    StructDeclarationImpl structDeclaration = new StructDeclarationImpl();
    return structDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemberElement createMemberElement()
  {
    MemberElementImpl memberElement = new MemberElementImpl();
    return memberElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyElement createKeyElement()
  {
    KeyElementImpl keyElement = new KeyElementImpl();
    return keyElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InterfaceDeclaration createInterfaceDeclaration()
  {
    InterfaceDeclarationImpl interfaceDeclaration = new InterfaceDeclarationImpl();
    return interfaceDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractInterfaceComponent createAbstractInterfaceComponent()
  {
    AbstractInterfaceComponentImpl abstractInterfaceComponent = new AbstractInterfaceComponentImpl();
    return abstractInterfaceComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDeclaration createFunctionDeclaration()
  {
    FunctionDeclarationImpl functionDeclaration = new FunctionDeclarationImpl();
    return functionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventDeclaration createEventDeclaration()
  {
    EventDeclarationImpl eventDeclaration = new EventDeclarationImpl();
    return eventDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnTypeElement createReturnTypeElement()
  {
    ReturnTypeElementImpl returnTypeElement = new ReturnTypeElementImpl();
    return returnTypeElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterElement createParameterElement()
  {
    ParameterElementImpl parameterElement = new ParameterElementImpl();
    return parameterElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DocCommentElement createDocCommentElement()
  {
    DocCommentElementImpl docCommentElement = new DocCommentElementImpl();
    return docCommentElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterDirection createParameterDirectionFromString(EDataType eDataType, String initialValue)
  {
    ParameterDirection result = ParameterDirection.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertParameterDirectionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdlPackage getIdlPackage()
  {
    return (IdlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IdlPackage getPackage()
  {
    return IdlPackage.eINSTANCE;
  }

} //IdlFactoryImpl
