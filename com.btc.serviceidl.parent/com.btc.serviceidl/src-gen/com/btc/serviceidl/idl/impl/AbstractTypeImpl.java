/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.impl;

import com.btc.serviceidl.idl.AbstractCollection;
import com.btc.serviceidl.idl.AbstractCrossReference;
import com.btc.serviceidl.idl.AbstractType;
import com.btc.serviceidl.idl.IdlPackage;
import com.btc.serviceidl.idl.PrimitiveType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.btc.serviceidl.idl.impl.AbstractTypeImpl#getPrimitiveType <em>Primitive Type</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.AbstractTypeImpl#getReferenceType <em>Reference Type</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.AbstractTypeImpl#getCollectionType <em>Collection Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractTypeImpl extends ReturnTypeElementImpl implements AbstractType
{
  /**
   * The cached value of the '{@link #getPrimitiveType() <em>Primitive Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimitiveType()
   * @generated
   * @ordered
   */
  protected PrimitiveType primitiveType;

  /**
   * The cached value of the '{@link #getReferenceType() <em>Reference Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceType()
   * @generated
   * @ordered
   */
  protected AbstractCrossReference referenceType;

  /**
   * The cached value of the '{@link #getCollectionType() <em>Collection Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollectionType()
   * @generated
   * @ordered
   */
  protected AbstractCollection collectionType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IdlPackage.Literals.ABSTRACT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType getPrimitiveType()
  {
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimitiveType(PrimitiveType newPrimitiveType, NotificationChain msgs)
  {
    PrimitiveType oldPrimitiveType = primitiveType;
    primitiveType = newPrimitiveType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE, oldPrimitiveType, newPrimitiveType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrimitiveType(PrimitiveType newPrimitiveType)
  {
    if (newPrimitiveType != primitiveType)
    {
      NotificationChain msgs = null;
      if (primitiveType != null)
        msgs = ((InternalEObject)primitiveType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE, null, msgs);
      if (newPrimitiveType != null)
        msgs = ((InternalEObject)newPrimitiveType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE, null, msgs);
      msgs = basicSetPrimitiveType(newPrimitiveType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE, newPrimitiveType, newPrimitiveType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCrossReference getReferenceType()
  {
    if (referenceType != null && referenceType.eIsProxy())
    {
      InternalEObject oldReferenceType = (InternalEObject)referenceType;
      referenceType = (AbstractCrossReference)eResolveProxy(oldReferenceType);
      if (referenceType != oldReferenceType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE, oldReferenceType, referenceType));
      }
    }
    return referenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCrossReference basicGetReferenceType()
  {
    return referenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferenceType(AbstractCrossReference newReferenceType)
  {
    AbstractCrossReference oldReferenceType = referenceType;
    referenceType = newReferenceType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE, oldReferenceType, referenceType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCollection getCollectionType()
  {
    return collectionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCollectionType(AbstractCollection newCollectionType, NotificationChain msgs)
  {
    AbstractCollection oldCollectionType = collectionType;
    collectionType = newCollectionType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE, oldCollectionType, newCollectionType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCollectionType(AbstractCollection newCollectionType)
  {
    if (newCollectionType != collectionType)
    {
      NotificationChain msgs = null;
      if (collectionType != null)
        msgs = ((InternalEObject)collectionType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE, null, msgs);
      if (newCollectionType != null)
        msgs = ((InternalEObject)newCollectionType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE, null, msgs);
      msgs = basicSetCollectionType(newCollectionType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE, newCollectionType, newCollectionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE:
        return basicSetPrimitiveType(null, msgs);
      case IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE:
        return basicSetCollectionType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE:
        return getPrimitiveType();
      case IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE:
        if (resolve) return getReferenceType();
        return basicGetReferenceType();
      case IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE:
        return getCollectionType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE:
        setPrimitiveType((PrimitiveType)newValue);
        return;
      case IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE:
        setReferenceType((AbstractCrossReference)newValue);
        return;
      case IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE:
        setCollectionType((AbstractCollection)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE:
        setPrimitiveType((PrimitiveType)null);
        return;
      case IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE:
        setReferenceType((AbstractCrossReference)null);
        return;
      case IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE:
        setCollectionType((AbstractCollection)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.ABSTRACT_TYPE__PRIMITIVE_TYPE:
        return primitiveType != null;
      case IdlPackage.ABSTRACT_TYPE__REFERENCE_TYPE:
        return referenceType != null;
      case IdlPackage.ABSTRACT_TYPE__COLLECTION_TYPE:
        return collectionType != null;
    }
    return super.eIsSet(featureID);
  }

} //AbstractTypeImpl
