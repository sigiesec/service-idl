/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.impl;

import com.btc.serviceidl.idl.AbstractException;
import com.btc.serviceidl.idl.AbstractSequenceHint;
import com.btc.serviceidl.idl.AbstractType;
import com.btc.serviceidl.idl.IdlPackage;
import com.btc.serviceidl.idl.SequenceDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sequence Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.btc.serviceidl.idl.impl.SequenceDeclarationImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.SequenceDeclarationImpl#isFailable <em>Failable</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.SequenceDeclarationImpl#getRaisedExceptions <em>Raised Exceptions</em>}</li>
 *   <li>{@link com.btc.serviceidl.idl.impl.SequenceDeclarationImpl#getSequenceHints <em>Sequence Hints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SequenceDeclarationImpl extends AbstractCollectionImpl implements SequenceDeclaration
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected AbstractType type;

  /**
   * The default value of the '{@link #isFailable() <em>Failable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFailable()
   * @generated
   * @ordered
   */
  protected static final boolean FAILABLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFailable() <em>Failable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFailable()
   * @generated
   * @ordered
   */
  protected boolean failable = FAILABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getRaisedExceptions() <em>Raised Exceptions</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRaisedExceptions()
   * @generated
   * @ordered
   */
  protected EList<AbstractException> raisedExceptions;

  /**
   * The cached value of the '{@link #getSequenceHints() <em>Sequence Hints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequenceHints()
   * @generated
   * @ordered
   */
  protected EList<AbstractSequenceHint> sequenceHints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SequenceDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IdlPackage.Literals.SEQUENCE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(AbstractType newType, NotificationChain msgs)
  {
    AbstractType oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IdlPackage.SEQUENCE_DECLARATION__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(AbstractType newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IdlPackage.SEQUENCE_DECLARATION__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IdlPackage.SEQUENCE_DECLARATION__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.SEQUENCE_DECLARATION__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFailable()
  {
    return failable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFailable(boolean newFailable)
  {
    boolean oldFailable = failable;
    failable = newFailable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IdlPackage.SEQUENCE_DECLARATION__FAILABLE, oldFailable, failable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractException> getRaisedExceptions()
  {
    if (raisedExceptions == null)
    {
      raisedExceptions = new EObjectResolvingEList<AbstractException>(AbstractException.class, this, IdlPackage.SEQUENCE_DECLARATION__RAISED_EXCEPTIONS);
    }
    return raisedExceptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractSequenceHint> getSequenceHints()
  {
    if (sequenceHints == null)
    {
      sequenceHints = new EObjectContainmentEList<AbstractSequenceHint>(AbstractSequenceHint.class, this, IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS);
    }
    return sequenceHints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IdlPackage.SEQUENCE_DECLARATION__TYPE:
        return basicSetType(null, msgs);
      case IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS:
        return ((InternalEList<?>)getSequenceHints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IdlPackage.SEQUENCE_DECLARATION__TYPE:
        return getType();
      case IdlPackage.SEQUENCE_DECLARATION__FAILABLE:
        return isFailable();
      case IdlPackage.SEQUENCE_DECLARATION__RAISED_EXCEPTIONS:
        return getRaisedExceptions();
      case IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS:
        return getSequenceHints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IdlPackage.SEQUENCE_DECLARATION__TYPE:
        setType((AbstractType)newValue);
        return;
      case IdlPackage.SEQUENCE_DECLARATION__FAILABLE:
        setFailable((Boolean)newValue);
        return;
      case IdlPackage.SEQUENCE_DECLARATION__RAISED_EXCEPTIONS:
        getRaisedExceptions().clear();
        getRaisedExceptions().addAll((Collection<? extends AbstractException>)newValue);
        return;
      case IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS:
        getSequenceHints().clear();
        getSequenceHints().addAll((Collection<? extends AbstractSequenceHint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.SEQUENCE_DECLARATION__TYPE:
        setType((AbstractType)null);
        return;
      case IdlPackage.SEQUENCE_DECLARATION__FAILABLE:
        setFailable(FAILABLE_EDEFAULT);
        return;
      case IdlPackage.SEQUENCE_DECLARATION__RAISED_EXCEPTIONS:
        getRaisedExceptions().clear();
        return;
      case IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS:
        getSequenceHints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IdlPackage.SEQUENCE_DECLARATION__TYPE:
        return type != null;
      case IdlPackage.SEQUENCE_DECLARATION__FAILABLE:
        return failable != FAILABLE_EDEFAULT;
      case IdlPackage.SEQUENCE_DECLARATION__RAISED_EXCEPTIONS:
        return raisedExceptions != null && !raisedExceptions.isEmpty();
      case IdlPackage.SEQUENCE_DECLARATION__SEQUENCE_HINTS:
        return sequenceHints != null && !sequenceHints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (failable: ");
    result.append(failable);
    result.append(')');
    return result.toString();
  }

} //SequenceDeclarationImpl
