/**
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.idl.util;

import com.btc.serviceidl.idl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.btc.serviceidl.idl.IdlPackage
 * @generated
 */
public class IdlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IdlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = IdlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IdlSwitch<Adapter> modelSwitch =
    new IdlSwitch<Adapter>()
    {
      @Override
      public Adapter caseIDLSpecification(IDLSpecification object)
      {
        return createIDLSpecificationAdapter();
      }
      @Override
      public Adapter caseImportDeclaration(ImportDeclaration object)
      {
        return createImportDeclarationAdapter();
      }
      @Override
      public Adapter caseModuleDeclaration(ModuleDeclaration object)
      {
        return createModuleDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractModuleComponent(AbstractModuleComponent object)
      {
        return createAbstractModuleComponentAdapter();
      }
      @Override
      public Adapter caseAbstractException(AbstractException object)
      {
        return createAbstractExceptionAdapter();
      }
      @Override
      public Adapter caseExceptionReferenceDeclaration(ExceptionReferenceDeclaration object)
      {
        return createExceptionReferenceDeclarationAdapter();
      }
      @Override
      public Adapter caseExceptionDeclaration(ExceptionDeclaration object)
      {
        return createExceptionDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractTypeDeclaration(AbstractTypeDeclaration object)
      {
        return createAbstractTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractCrossReference(AbstractCrossReference object)
      {
        return createAbstractCrossReferenceAdapter();
      }
      @Override
      public Adapter caseAbstractType(AbstractType object)
      {
        return createAbstractTypeAdapter();
      }
      @Override
      public Adapter caseAliasDeclaration(AliasDeclaration object)
      {
        return createAliasDeclarationAdapter();
      }
      @Override
      public Adapter caseEnumDeclaration(EnumDeclaration object)
      {
        return createEnumDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractCollection(AbstractCollection object)
      {
        return createAbstractCollectionAdapter();
      }
      @Override
      public Adapter caseSequenceDeclaration(SequenceDeclaration object)
      {
        return createSequenceDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractSequenceHint(AbstractSequenceHint object)
      {
        return createAbstractSequenceHintAdapter();
      }
      @Override
      public Adapter caseTypicalLengthHint(TypicalLengthHint object)
      {
        return createTypicalLengthHintAdapter();
      }
      @Override
      public Adapter caseTypicalSizeHint(TypicalSizeHint object)
      {
        return createTypicalSizeHintAdapter();
      }
      @Override
      public Adapter caseTupleDeclaration(TupleDeclaration object)
      {
        return createTupleDeclarationAdapter();
      }
      @Override
      public Adapter caseStructDeclaration(StructDeclaration object)
      {
        return createStructDeclarationAdapter();
      }
      @Override
      public Adapter caseMemberElement(MemberElement object)
      {
        return createMemberElementAdapter();
      }
      @Override
      public Adapter caseKeyElement(KeyElement object)
      {
        return createKeyElementAdapter();
      }
      @Override
      public Adapter caseInterfaceDeclaration(InterfaceDeclaration object)
      {
        return createInterfaceDeclarationAdapter();
      }
      @Override
      public Adapter caseAbstractInterfaceComponent(AbstractInterfaceComponent object)
      {
        return createAbstractInterfaceComponentAdapter();
      }
      @Override
      public Adapter caseFunctionDeclaration(FunctionDeclaration object)
      {
        return createFunctionDeclarationAdapter();
      }
      @Override
      public Adapter caseEventDeclaration(EventDeclaration object)
      {
        return createEventDeclarationAdapter();
      }
      @Override
      public Adapter caseReturnTypeElement(ReturnTypeElement object)
      {
        return createReturnTypeElementAdapter();
      }
      @Override
      public Adapter caseParameterElement(ParameterElement object)
      {
        return createParameterElementAdapter();
      }
      @Override
      public Adapter caseDocCommentElement(DocCommentElement object)
      {
        return createDocCommentElementAdapter();
      }
      @Override
      public Adapter casePrimitiveType(PrimitiveType object)
      {
        return createPrimitiveTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.IDLSpecification <em>IDL Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.IDLSpecification
   * @generated
   */
  public Adapter createIDLSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ImportDeclaration <em>Import Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ImportDeclaration
   * @generated
   */
  public Adapter createImportDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ModuleDeclaration <em>Module Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ModuleDeclaration
   * @generated
   */
  public Adapter createModuleDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractModuleComponent <em>Abstract Module Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractModuleComponent
   * @generated
   */
  public Adapter createAbstractModuleComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractException <em>Abstract Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractException
   * @generated
   */
  public Adapter createAbstractExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ExceptionReferenceDeclaration <em>Exception Reference Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ExceptionReferenceDeclaration
   * @generated
   */
  public Adapter createExceptionReferenceDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ExceptionDeclaration <em>Exception Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ExceptionDeclaration
   * @generated
   */
  public Adapter createExceptionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractTypeDeclaration <em>Abstract Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractTypeDeclaration
   * @generated
   */
  public Adapter createAbstractTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractCrossReference <em>Abstract Cross Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractCrossReference
   * @generated
   */
  public Adapter createAbstractCrossReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractType <em>Abstract Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractType
   * @generated
   */
  public Adapter createAbstractTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AliasDeclaration <em>Alias Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AliasDeclaration
   * @generated
   */
  public Adapter createAliasDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.EnumDeclaration <em>Enum Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.EnumDeclaration
   * @generated
   */
  public Adapter createEnumDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractCollection <em>Abstract Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractCollection
   * @generated
   */
  public Adapter createAbstractCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.SequenceDeclaration <em>Sequence Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.SequenceDeclaration
   * @generated
   */
  public Adapter createSequenceDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractSequenceHint <em>Abstract Sequence Hint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractSequenceHint
   * @generated
   */
  public Adapter createAbstractSequenceHintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.TypicalLengthHint <em>Typical Length Hint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.TypicalLengthHint
   * @generated
   */
  public Adapter createTypicalLengthHintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.TypicalSizeHint <em>Typical Size Hint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.TypicalSizeHint
   * @generated
   */
  public Adapter createTypicalSizeHintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.TupleDeclaration <em>Tuple Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.TupleDeclaration
   * @generated
   */
  public Adapter createTupleDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.StructDeclaration <em>Struct Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.StructDeclaration
   * @generated
   */
  public Adapter createStructDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.MemberElement <em>Member Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.MemberElement
   * @generated
   */
  public Adapter createMemberElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.KeyElement <em>Key Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.KeyElement
   * @generated
   */
  public Adapter createKeyElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.InterfaceDeclaration <em>Interface Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.InterfaceDeclaration
   * @generated
   */
  public Adapter createInterfaceDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.AbstractInterfaceComponent <em>Abstract Interface Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.AbstractInterfaceComponent
   * @generated
   */
  public Adapter createAbstractInterfaceComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.FunctionDeclaration <em>Function Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.FunctionDeclaration
   * @generated
   */
  public Adapter createFunctionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.EventDeclaration <em>Event Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.EventDeclaration
   * @generated
   */
  public Adapter createEventDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ReturnTypeElement <em>Return Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ReturnTypeElement
   * @generated
   */
  public Adapter createReturnTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.ParameterElement <em>Parameter Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.ParameterElement
   * @generated
   */
  public Adapter createParameterElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.DocCommentElement <em>Doc Comment Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.DocCommentElement
   * @generated
   */
  public Adapter createDocCommentElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.btc.serviceidl.idl.PrimitiveType <em>Primitive Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.btc.serviceidl.idl.PrimitiveType
   * @generated
   */
  public Adapter createPrimitiveTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //IdlAdapterFactory
