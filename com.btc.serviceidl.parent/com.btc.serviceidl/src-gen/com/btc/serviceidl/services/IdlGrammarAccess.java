/*
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IdlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class IDLSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.IDLSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportedEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportedEntitiesImportDeclarationParserRuleCall_0_0 = (RuleCall)cImportedEntitiesAssignment_0.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesModuleDeclarationParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		///* general document structure (root) */ IDLSpecification:
		//	importedEntities+=ImportDeclaration*
		//	modules+=ModuleDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//importedEntities+=ImportDeclaration* modules+=ModuleDeclaration*
		public Group getGroup() { return cGroup; }
		
		//importedEntities+=ImportDeclaration*
		public Assignment getImportedEntitiesAssignment_0() { return cImportedEntitiesAssignment_0; }
		
		//ImportDeclaration
		public RuleCall getImportedEntitiesImportDeclarationParserRuleCall_0_0() { return cImportedEntitiesImportDeclarationParserRuleCall_0_0; }
		
		//modules+=ModuleDeclaration*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }
		
		//ModuleDeclaration
		public RuleCall getModulesModuleDeclarationParserRuleCall_1_0() { return cModulesModuleDeclarationParserRuleCall_1_0; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		///* include packages/namespaces/types */ ImportDeclaration:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class ModuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ModuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVirtualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVirtualVirtualKeyword_0_0 = (Keyword)cVirtualAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMainMainKeyword_1_0 = (Keyword)cMainAssignment_1.eContents().get(0);
		private final Keyword cModuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cModuleComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModuleComponentsAbstractModuleComponentParserRuleCall_5_0 = (RuleCall)cModuleComponentsAssignment_5.eContents().get(0);
		private final Assignment cNestedModulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNestedModulesModuleDeclarationParserRuleCall_6_0 = (RuleCall)cNestedModulesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* regular module */ ModuleDeclaration:
		//	virtual?='virtual'? main?='main'? 'module' name=ID '{' moduleComponents+=AbstractModuleComponent*
		//	nestedModules+=ModuleDeclaration* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//virtual?='virtual'? main?='main'? 'module' name=ID '{' moduleComponents+=AbstractModuleComponent*
		//nestedModules+=ModuleDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//virtual?='virtual'?
		public Assignment getVirtualAssignment_0() { return cVirtualAssignment_0; }
		
		//'virtual'
		public Keyword getVirtualVirtualKeyword_0_0() { return cVirtualVirtualKeyword_0_0; }
		
		//main?='main'?
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//'main'
		public Keyword getMainMainKeyword_1_0() { return cMainMainKeyword_1_0; }
		
		//'module'
		public Keyword getModuleKeyword_2() { return cModuleKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//moduleComponents+=AbstractModuleComponent*
		public Assignment getModuleComponentsAssignment_5() { return cModuleComponentsAssignment_5; }
		
		//AbstractModuleComponent
		public RuleCall getModuleComponentsAbstractModuleComponentParserRuleCall_5_0() { return cModuleComponentsAbstractModuleComponentParserRuleCall_5_0; }
		
		//nestedModules+=ModuleDeclaration*
		public Assignment getNestedModulesAssignment_6() { return cNestedModulesAssignment_6; }
		
		//ModuleDeclaration
		public RuleCall getNestedModulesModuleDeclarationParserRuleCall_6_0() { return cNestedModulesModuleDeclarationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AbstractModuleComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractModuleComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStructDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractExceptionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cInterfaceDeclarationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cAliasDeclarationParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		///* nested components which may occur within a regular module */ AbstractModuleComponent:
		//	EnumDeclaration ';'
		//	| StructDeclaration ';'
		//	| AbstractException ';'
		//	| InterfaceDeclaration ';'
		//	| AliasDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//EnumDeclaration ';' | StructDeclaration ';' | AbstractException ';' | InterfaceDeclaration ';' | AliasDeclaration ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumDeclaration ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_0_0() { return cEnumDeclarationParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//StructDeclaration ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_1_0() { return cStructDeclarationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//AbstractException ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//AbstractException
		public RuleCall getAbstractExceptionParserRuleCall_2_0() { return cAbstractExceptionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//InterfaceDeclaration ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_3_0() { return cInterfaceDeclarationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//AliasDeclaration ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//AliasDeclaration
		public RuleCall getAliasDeclarationParserRuleCall_4_0() { return cAliasDeclarationParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class AbstractExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractException");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExceptionReferenceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExceptionDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* generic exception */ AbstractException:
		//	ExceptionReferenceDeclaration | ExceptionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ExceptionReferenceDeclaration | ExceptionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExceptionReferenceDeclaration
		public RuleCall getExceptionReferenceDeclarationParserRuleCall_0() { return cExceptionReferenceDeclarationParserRuleCall_0; }
		
		//ExceptionDeclaration
		public RuleCall getExceptionDeclarationParserRuleCall_1() { return cExceptionDeclarationParserRuleCall_1; }
	}
	public class ExceptionReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ExceptionReferenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		
		///* exception reference = explicitly provide its origin as file path */ ExceptionReferenceDeclaration:
		//	'exception' name=ID 'ref' location=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' name=ID 'ref' location=STRING
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }
		
		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }
	}
	public class ExceptionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ExceptionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSupertypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSupertypeAbstractExceptionCrossReference_2_1_0 = (CrossReference)cSupertypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSupertypeAbstractExceptionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSupertypeAbstractExceptionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cMembersMemberElementParserRuleCall_4_0_0 = (RuleCall)cMembersAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* exception */ ExceptionDeclaration:
		//	'exception' name=ID (':' supertype=[AbstractException|QualifiedName])?
		//	'{' (members+=MemberElement ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' name=ID (':' supertype=[AbstractException|QualifiedName])? '{' (members+=MemberElement ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' supertype=[AbstractException|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//supertype=[AbstractException|QualifiedName]
		public Assignment getSupertypeAssignment_2_1() { return cSupertypeAssignment_2_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getSupertypeAbstractExceptionCrossReference_2_1_0() { return cSupertypeAbstractExceptionCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSupertypeAbstractExceptionQualifiedNameParserRuleCall_2_1_0_1() { return cSupertypeAbstractExceptionQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(members+=MemberElement ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//members+=MemberElement
		public Assignment getMembersAssignment_4_0() { return cMembersAssignment_4_0; }
		
		//MemberElement
		public RuleCall getMembersMemberElementParserRuleCall_4_0_0() { return cMembersMemberElementParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AbstractTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractExceptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* generic declaration of new types */ AbstractTypeDeclaration:
		//	AliasDeclaration
		//	| EnumDeclaration
		//	| StructDeclaration
		//	| AbstractException;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDeclaration | EnumDeclaration | StructDeclaration | AbstractException
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDeclaration
		public RuleCall getAliasDeclarationParserRuleCall_0() { return cAliasDeclarationParserRuleCall_0; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_1() { return cEnumDeclarationParserRuleCall_1; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_2() { return cStructDeclarationParserRuleCall_2; }
		
		//AbstractException
		public RuleCall getAbstractExceptionParserRuleCall_3() { return cAbstractExceptionParserRuleCall_3; }
	}
	public class AbstractCrossReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractCrossReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractCollectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbstractExceptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* previously declared types which can be used in a cross-reference */ AbstractCrossReference:
		//	AliasDeclaration
		//	| EnumDeclaration
		//	| StructDeclaration
		//	| AbstractCollection
		//	| AbstractException;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDeclaration | EnumDeclaration | StructDeclaration | AbstractCollection | AbstractException
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDeclaration
		public RuleCall getAliasDeclarationParserRuleCall_0() { return cAliasDeclarationParserRuleCall_0; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_1() { return cEnumDeclarationParserRuleCall_1; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_2() { return cStructDeclarationParserRuleCall_2; }
		
		//AbstractCollection
		public RuleCall getAbstractCollectionParserRuleCall_3() { return cAbstractCollectionParserRuleCall_3; }
		
		//AbstractException
		public RuleCall getAbstractExceptionParserRuleCall_4() { return cAbstractExceptionParserRuleCall_4; }
	}
	public class AbstractTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeParserRuleCall_0_0 = (RuleCall)cPrimitiveTypeAssignment_0.eContents().get(0);
		private final Assignment cReferenceTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cReferenceTypeAbstractCrossReferenceCrossReference_1_0 = (CrossReference)cReferenceTypeAssignment_1.eContents().get(0);
		private final RuleCall cReferenceTypeAbstractCrossReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferenceTypeAbstractCrossReferenceCrossReference_1_0.eContents().get(1);
		private final Assignment cCollectionTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCollectionTypeAbstractCollectionParserRuleCall_2_0 = (RuleCall)cCollectionTypeAssignment_2.eContents().get(0);
		
		///* meta type for any usable type */ AbstractType:
		//	primitiveType=PrimitiveType
		//	| referenceType=[AbstractCrossReference|QualifiedName] | collectionType=AbstractCollection;
		@Override public ParserRule getRule() { return rule; }
		
		//primitiveType=PrimitiveType | referenceType=[AbstractCrossReference|QualifiedName] | collectionType=AbstractCollection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_0() { return cPrimitiveTypeAssignment_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeParserRuleCall_0_0() { return cPrimitiveTypePrimitiveTypeParserRuleCall_0_0; }
		
		//referenceType=[AbstractCrossReference|QualifiedName]
		public Assignment getReferenceTypeAssignment_1() { return cReferenceTypeAssignment_1; }
		
		//[AbstractCrossReference|QualifiedName]
		public CrossReference getReferenceTypeAbstractCrossReferenceCrossReference_1_0() { return cReferenceTypeAbstractCrossReferenceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getReferenceTypeAbstractCrossReferenceQualifiedNameParserRuleCall_1_0_1() { return cReferenceTypeAbstractCrossReferenceQualifiedNameParserRuleCall_1_0_1; }
		
		//collectionType=AbstractCollection
		public Assignment getCollectionTypeAssignment_2() { return cCollectionTypeAssignment_2; }
		
		//AbstractCollection
		public RuleCall getCollectionTypeAbstractCollectionParserRuleCall_2_0() { return cCollectionTypeAbstractCollectionParserRuleCall_2_0; }
	}
	public class AliasDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AliasDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAbstractTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AliasDeclaration:
		//	'typedef' type=AbstractType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' type=AbstractType name=ID
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_1_0() { return cTypeAbstractTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainedIdentifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainedIdentifiersIDTerminalRuleCall_3_0 = (RuleCall)cContainedIdentifiersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainedIdentifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainedIdentifiersIDTerminalRuleCall_4_1_0 = (RuleCall)cContainedIdentifiersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclaratorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclaratorIDTerminalRuleCall_6_0 = (RuleCall)cDeclaratorAssignment_6.eContents().get(0);
		
		///* enumeration */ EnumDeclaration:
		//	'enum' name=ID '{' containedIdentifiers+=ID (',' containedIdentifiers+=ID)* '}'
		//	declarator=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' containedIdentifiers+=ID (',' containedIdentifiers+=ID)* '}' declarator=ID?
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//containedIdentifiers+=ID
		public Assignment getContainedIdentifiersAssignment_3() { return cContainedIdentifiersAssignment_3; }
		
		//ID
		public RuleCall getContainedIdentifiersIDTerminalRuleCall_3_0() { return cContainedIdentifiersIDTerminalRuleCall_3_0; }
		
		//(',' containedIdentifiers+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//containedIdentifiers+=ID
		public Assignment getContainedIdentifiersAssignment_4_1() { return cContainedIdentifiersAssignment_4_1; }
		
		//ID
		public RuleCall getContainedIdentifiersIDTerminalRuleCall_4_1_0() { return cContainedIdentifiersIDTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//declarator=ID?
		public Assignment getDeclaratorAssignment_6() { return cDeclaratorAssignment_6; }
		
		//ID
		public RuleCall getDeclaratorIDTerminalRuleCall_6_0() { return cDeclaratorIDTerminalRuleCall_6_0; }
	}
	public class AbstractCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractCollection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* meta type for element containers */ AbstractCollection:
		//	SequenceDeclaration | TupleDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceDeclaration | TupleDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceDeclaration
		public RuleCall getSequenceDeclarationParserRuleCall_0() { return cSequenceDeclarationParserRuleCall_0; }
		
		//TupleDeclaration
		public RuleCall getTupleDeclarationParserRuleCall_1() { return cTupleDeclarationParserRuleCall_1; }
	}
	public class SequenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.SequenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeAbstractTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFailableAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cFailableFailableKeyword_2_1_0_0 = (Keyword)cFailableAssignment_2_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypeAbstractTypeParserRuleCall_2_1_1_0 = (RuleCall)cTypeAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cRaisesKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_1_0 = (CrossReference)cRaisedExceptionsAssignment_2_1_2_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_1_0.eContents().get(1);
		private final Group cGroup_2_1_2_2 = (Group)cGroup_2_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_2_0 = (Keyword)cGroup_2_1_2_2.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_2_1_2_2_1 = (Assignment)cGroup_2_1_2_2.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_2_1_0 = (CrossReference)cRaisedExceptionsAssignment_2_1_2_2_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_2_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_2_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSequenceHintsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSequenceHintsAbstractSequenceHintParserRuleCall_4_1_0 = (RuleCall)cSequenceHintsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSequenceHintsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSequenceHintsAbstractSequenceHintParserRuleCall_4_2_1_0 = (RuleCall)cSequenceHintsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		///* sequence */ SequenceDeclaration:
		//	'sequence' '<' (type=AbstractType | failable?='failable' type=AbstractType ('raises'
		//	raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?)
		//	'>' ('[' sequenceHints+=AbstractSequenceHint (',' sequenceHints+=AbstractSequenceHint)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sequence' '<' (type=AbstractType | failable?='failable' type=AbstractType ('raises'
		//raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?) '>'
		//('[' sequenceHints+=AbstractSequenceHint (',' sequenceHints+=AbstractSequenceHint)* ']')?
		public Group getGroup() { return cGroup; }
		
		//'sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=AbstractType | failable?='failable' type=AbstractType ('raises' raisedExceptions+=[AbstractException|QualifiedName]
		//(',' raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_2_0_0() { return cTypeAbstractTypeParserRuleCall_2_0_0; }
		
		//failable?='failable' type=AbstractType ('raises' raisedExceptions+=[AbstractException|QualifiedName] (','
		//raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//failable?='failable'
		public Assignment getFailableAssignment_2_1_0() { return cFailableAssignment_2_1_0; }
		
		//'failable'
		public Keyword getFailableFailableKeyword_2_1_0_0() { return cFailableFailableKeyword_2_1_0_0; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_2_1_1() { return cTypeAssignment_2_1_1; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_2_1_1_0() { return cTypeAbstractTypeParserRuleCall_2_1_1_0; }
		
		//('raises' raisedExceptions+=[AbstractException|QualifiedName] (','
		//raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'raises'
		public Keyword getRaisesKeyword_2_1_2_0() { return cRaisesKeyword_2_1_2_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_2_1_2_1() { return cRaisedExceptionsAssignment_2_1_2_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_2_1_2_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_1_0_1; }
		
		//(',' raisedExceptions+=[AbstractException|QualifiedName])*
		public Group getGroup_2_1_2_2() { return cGroup_2_1_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_2_0() { return cCommaKeyword_2_1_2_2_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_2_1_2_2_1() { return cRaisedExceptionsAssignment_2_1_2_2_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_2_1_2_2_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_2_1_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_2_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_2_1_2_2_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//('[' sequenceHints+=AbstractSequenceHint (',' sequenceHints+=AbstractSequenceHint)* ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//sequenceHints+=AbstractSequenceHint
		public Assignment getSequenceHintsAssignment_4_1() { return cSequenceHintsAssignment_4_1; }
		
		//AbstractSequenceHint
		public RuleCall getSequenceHintsAbstractSequenceHintParserRuleCall_4_1_0() { return cSequenceHintsAbstractSequenceHintParserRuleCall_4_1_0; }
		
		//(',' sequenceHints+=AbstractSequenceHint)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//sequenceHints+=AbstractSequenceHint
		public Assignment getSequenceHintsAssignment_4_2_1() { return cSequenceHintsAssignment_4_2_1; }
		
		//AbstractSequenceHint
		public RuleCall getSequenceHintsAbstractSequenceHintParserRuleCall_4_2_1_0() { return cSequenceHintsAbstractSequenceHintParserRuleCall_4_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}
	public class AbstractSequenceHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractSequenceHint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypicalLengthHintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypicalSizeHintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* meta type for sequence hint */ AbstractSequenceHint:
		//	TypicalLengthHint | TypicalSizeHint;
		@Override public ParserRule getRule() { return rule; }
		
		//TypicalLengthHint | TypicalSizeHint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypicalLengthHint
		public RuleCall getTypicalLengthHintParserRuleCall_0() { return cTypicalLengthHintParserRuleCall_0; }
		
		//TypicalSizeHint
		public RuleCall getTypicalSizeHintParserRuleCall_1() { return cTypicalSizeHintParserRuleCall_1; }
	}
	public class TypicalLengthHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.TypicalLengthHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypicalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthINTTerminalRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		
		///* typical sequence length hint */ TypicalLengthHint:
		//	'typical' 'sequence' 'length' '=' length=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'typical' 'sequence' 'length' '=' length=INT
		public Group getGroup() { return cGroup; }
		
		//'typical'
		public Keyword getTypicalKeyword_0() { return cTypicalKeyword_0; }
		
		//'sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//length=INT
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_4_0() { return cLengthINTTerminalRuleCall_4_0; }
	}
	public class TypicalSizeHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.TypicalSizeHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypicalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeINTTerminalRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		
		///* typical element size hint */ TypicalSizeHint:
		//	'typical' 'element' 'size' '=' size=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'typical' 'element' 'size' '=' size=INT
		public Group getGroup() { return cGroup; }
		
		//'typical'
		public Keyword getTypicalKeyword_0() { return cTypicalKeyword_0; }
		
		//'element'
		public Keyword getElementKeyword_1() { return cElementKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//size=INT
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_4_0() { return cSizeINTTerminalRuleCall_4_0; }
	}
	public class TupleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.TupleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTupleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesAbstractTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesAbstractTypeParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* tuple */ TupleDeclaration:
		//	'tuple' '<' types+=AbstractType (',' types+=AbstractType)* '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'tuple' '<' types+=AbstractType (',' types+=AbstractType)* '>'
		public Group getGroup() { return cGroup; }
		
		//'tuple'
		public Keyword getTupleKeyword_0() { return cTupleKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//types+=AbstractType
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }
		
		//AbstractType
		public RuleCall getTypesAbstractTypeParserRuleCall_2_0() { return cTypesAbstractTypeParserRuleCall_2_0; }
		
		//(',' types+=AbstractType)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//types+=AbstractType
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }
		
		//AbstractType
		public RuleCall getTypesAbstractTypeParserRuleCall_3_1_0() { return cTypesAbstractTypeParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSupertypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSupertypeStructDeclarationCrossReference_2_1_0 = (CrossReference)cSupertypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSupertypeStructDeclarationQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSupertypeStructDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cMembersMemberElementParserRuleCall_4_0_0_0 = (RuleCall)cMembersAssignment_4_0_0.eContents().get(0);
		private final Assignment cTypeDeclsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cTypeDeclsAbstractTypeDeclarationParserRuleCall_4_0_1_0 = (RuleCall)cTypeDeclsAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclaratorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclaratorIDTerminalRuleCall_6_0 = (RuleCall)cDeclaratorAssignment_6.eContents().get(0);
		
		///* struct */ StructDeclaration:
		//	'struct' name=ID (':' supertype=[StructDeclaration|QualifiedName])?
		//	'{' ((members+=MemberElement | typeDecls+=AbstractTypeDeclaration) ';')* '}'
		//	declarator=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID (':' supertype=[StructDeclaration|QualifiedName])? '{' ((members+=MemberElement |
		//typeDecls+=AbstractTypeDeclaration) ';')* '}' declarator=ID?
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' supertype=[StructDeclaration|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//supertype=[StructDeclaration|QualifiedName]
		public Assignment getSupertypeAssignment_2_1() { return cSupertypeAssignment_2_1; }
		
		//[StructDeclaration|QualifiedName]
		public CrossReference getSupertypeStructDeclarationCrossReference_2_1_0() { return cSupertypeStructDeclarationCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSupertypeStructDeclarationQualifiedNameParserRuleCall_2_1_0_1() { return cSupertypeStructDeclarationQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//((members+=MemberElement | typeDecls+=AbstractTypeDeclaration) ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//members+=MemberElement | typeDecls+=AbstractTypeDeclaration
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//members+=MemberElement
		public Assignment getMembersAssignment_4_0_0() { return cMembersAssignment_4_0_0; }
		
		//MemberElement
		public RuleCall getMembersMemberElementParserRuleCall_4_0_0_0() { return cMembersMemberElementParserRuleCall_4_0_0_0; }
		
		//typeDecls+=AbstractTypeDeclaration
		public Assignment getTypeDeclsAssignment_4_0_1() { return cTypeDeclsAssignment_4_0_1; }
		
		//AbstractTypeDeclaration
		public RuleCall getTypeDeclsAbstractTypeDeclarationParserRuleCall_4_0_1_0() { return cTypeDeclsAbstractTypeDeclarationParserRuleCall_4_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//declarator=ID?
		public Assignment getDeclaratorAssignment_6() { return cDeclaratorAssignment_6; }
		
		//ID
		public RuleCall getDeclaratorIDTerminalRuleCall_6_0() { return cDeclaratorIDTerminalRuleCall_6_0; }
	}
	public class MemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.MemberElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAbstractTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		///* class member */ MemberElement:
		//	optional?='optional'?
		//	type=AbstractType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//optional?='optional'? type=AbstractType name=ID
		public Group getGroup() { return cGroup; }
		
		//optional?='optional'?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_1_0() { return cTypeAbstractTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class KeyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.KeyElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAbstractTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cKeyNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyNameIDTerminalRuleCall_1_0 = (RuleCall)cKeyNameAssignment_1.eContents().get(0);
		
		///* key for event subscription */ KeyElement:
		//	type=AbstractType keyName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=AbstractType keyName=ID
		public Group getGroup() { return cGroup; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_0_0() { return cTypeAbstractTypeParserRuleCall_0_0; }
		
		//keyName=ID
		public Assignment getKeyNameAssignment_1() { return cKeyNameAssignment_1; }
		
		//ID
		public RuleCall getKeyNameIDTerminalRuleCall_1_0() { return cKeyNameIDTerminalRuleCall_1_0; }
	}
	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocCommentsDocCommentElementParserRuleCall_0_0 = (RuleCall)cDocCommentsAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cInterfaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4_1 = (UnorderedGroup)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cUnorderedGroup_4_1.eContents().get(0);
		private final Keyword cVersionKeyword_4_1_0_0 = (Keyword)cGroup_4_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_0_1 = (Keyword)cGroup_4_1_0.eContents().get(1);
		private final Assignment cVersionAssignment_4_1_0_2 = (Assignment)cGroup_4_1_0.eContents().get(2);
		private final RuleCall cVersionVERSIONTerminalRuleCall_4_1_0_2_0 = (RuleCall)cVersionAssignment_4_1_0_2.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cUnorderedGroup_4_1.eContents().get(1);
		private final Keyword cGuidKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_1_1 = (Keyword)cGroup_4_1_1.eContents().get(1);
		private final Assignment cGuidAssignment_4_1_1_2 = (Assignment)cGroup_4_1_1.eContents().get(2);
		private final RuleCall cGuidUUID_LITERALTerminalRuleCall_4_1_1_2_0 = (RuleCall)cGuidAssignment_4_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDerivesFromAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cDerivesFromInterfaceDeclarationCrossReference_5_1_0 = (CrossReference)cDerivesFromAssignment_5_1.eContents().get(0);
		private final RuleCall cDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cDerivesFromInterfaceDeclarationCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cDerivesFromAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cDerivesFromInterfaceDeclarationCrossReference_5_2_1_0 = (CrossReference)cDerivesFromAssignment_5_2_1.eContents().get(0);
		private final RuleCall cDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_2_1_0_1 = (RuleCall)cDerivesFromInterfaceDeclarationCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContainsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContainsAbstractInterfaceComponentParserRuleCall_7_0 = (RuleCall)cContainsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///* interface */ InterfaceDeclaration:
		//	docComments+=DocCommentElement*
		//	abstract?='abstract'?
		//	'interface' name=ID ('[' (('version' '=' version=VERSION)? & ('guid' '=' guid=UUID_LITERAL)?) ']')? (':'
		//	derivesFrom+=[InterfaceDeclaration|QualifiedName] (',' derivesFrom+=[InterfaceDeclaration|QualifiedName])*)? '{'
		//	contains+=AbstractInterfaceComponent* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//docComments+=DocCommentElement* abstract?='abstract'? 'interface' name=ID ('[' (('version' '=' version=VERSION)? &
		//('guid' '=' guid=UUID_LITERAL)?) ']')? (':' derivesFrom+=[InterfaceDeclaration|QualifiedName] (','
		//derivesFrom+=[InterfaceDeclaration|QualifiedName])*)? '{' contains+=AbstractInterfaceComponent* '}'
		public Group getGroup() { return cGroup; }
		
		//docComments+=DocCommentElement*
		public Assignment getDocCommentsAssignment_0() { return cDocCommentsAssignment_0; }
		
		//DocCommentElement
		public RuleCall getDocCommentsDocCommentElementParserRuleCall_0_0() { return cDocCommentsDocCommentElementParserRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_2() { return cInterfaceKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('[' (('version' '=' version=VERSION)? & ('guid' '=' guid=UUID_LITERAL)?) ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//('version' '=' version=VERSION)? & ('guid' '=' guid=UUID_LITERAL)?
		public UnorderedGroup getUnorderedGroup_4_1() { return cUnorderedGroup_4_1; }
		
		//('version' '=' version=VERSION)?
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }
		
		//'version'
		public Keyword getVersionKeyword_4_1_0_0() { return cVersionKeyword_4_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1_0_1() { return cEqualsSignKeyword_4_1_0_1; }
		
		//version=VERSION
		public Assignment getVersionAssignment_4_1_0_2() { return cVersionAssignment_4_1_0_2; }
		
		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_4_1_0_2_0() { return cVersionVERSIONTerminalRuleCall_4_1_0_2_0; }
		
		//('guid' '=' guid=UUID_LITERAL)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'guid'
		public Keyword getGuidKeyword_4_1_1_0() { return cGuidKeyword_4_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1_1_1() { return cEqualsSignKeyword_4_1_1_1; }
		
		//guid=UUID_LITERAL
		public Assignment getGuidAssignment_4_1_1_2() { return cGuidAssignment_4_1_1_2; }
		
		//UUID_LITERAL
		public RuleCall getGuidUUID_LITERALTerminalRuleCall_4_1_1_2_0() { return cGuidUUID_LITERALTerminalRuleCall_4_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//(':' derivesFrom+=[InterfaceDeclaration|QualifiedName] (',' derivesFrom+=[InterfaceDeclaration|QualifiedName])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//derivesFrom+=[InterfaceDeclaration|QualifiedName]
		public Assignment getDerivesFromAssignment_5_1() { return cDerivesFromAssignment_5_1; }
		
		//[InterfaceDeclaration|QualifiedName]
		public CrossReference getDerivesFromInterfaceDeclarationCrossReference_5_1_0() { return cDerivesFromInterfaceDeclarationCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_1_0_1() { return cDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_1_0_1; }
		
		//(',' derivesFrom+=[InterfaceDeclaration|QualifiedName])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//derivesFrom+=[InterfaceDeclaration|QualifiedName]
		public Assignment getDerivesFromAssignment_5_2_1() { return cDerivesFromAssignment_5_2_1; }
		
		//[InterfaceDeclaration|QualifiedName]
		public CrossReference getDerivesFromInterfaceDeclarationCrossReference_5_2_1_0() { return cDerivesFromInterfaceDeclarationCrossReference_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_2_1_0_1() { return cDerivesFromInterfaceDeclarationQualifiedNameParserRuleCall_5_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//contains+=AbstractInterfaceComponent*
		public Assignment getContainsAssignment_7() { return cContainsAssignment_7; }
		
		//AbstractInterfaceComponent
		public RuleCall getContainsAbstractInterfaceComponentParserRuleCall_7_0() { return cContainsAbstractInterfaceComponentParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AbstractInterfaceComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.AbstractInterfaceComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractTypeDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cEventDeclarationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		///* components which may occur within an interface */ AbstractInterfaceComponent:
		//	AbstractTypeDeclaration ';'
		//	| FunctionDeclaration ';'
		//	| EventDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractTypeDeclaration ';' | FunctionDeclaration ';' | EventDeclaration ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractTypeDeclaration ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//AbstractTypeDeclaration
		public RuleCall getAbstractTypeDeclarationParserRuleCall_0_0() { return cAbstractTypeDeclarationParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//FunctionDeclaration ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_1_0() { return cFunctionDeclarationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//EventDeclaration ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_2_0() { return cEventDeclarationParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocCommentsDocCommentElementParserRuleCall_0_0 = (RuleCall)cDocCommentsAssignment_0.eContents().get(0);
		private final Assignment cSyncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSyncSyncKeyword_1_0 = (Keyword)cSyncAssignment_1.eContents().get(0);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cQueryQueryKeyword_2_0 = (Keyword)cQueryAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersParameterElementParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersParameterElementParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cGroup_7.eContents().get(0);
		private final Keyword cReturnsKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cInjectedAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final Keyword cInjectedInjectableKeyword_7_0_1_0 = (Keyword)cInjectedAssignment_7_0_1.eContents().get(0);
		private final Assignment cReturnedTypeAssignment_7_0_2 = (Assignment)cGroup_7_0.eContents().get(2);
		private final RuleCall cReturnedTypeReturnTypeElementParserRuleCall_7_0_2_0 = (RuleCall)cReturnedTypeAssignment_7_0_2.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cRaisesKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_7_1_1_0 = (CrossReference)cRaisedExceptionsAssignment_7_1_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_7_1_1_0.eContents().get(1);
		private final Group cGroup_7_1_2 = (Group)cGroup_7_1.eContents().get(2);
		private final Keyword cCommaKeyword_7_1_2_0 = (Keyword)cGroup_7_1_2.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_7_1_2_1 = (Assignment)cGroup_7_1_2.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_7_1_2_1_0 = (CrossReference)cRaisedExceptionsAssignment_7_1_2_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_2_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_7_1_2_1_0.eContents().get(1);
		
		///* function */ FunctionDeclaration:
		//	docComments+=DocCommentElement*
		//	sync?='sync'? query?='query'?
		//	name=ID '(' (parameters+=ParameterElement (',' parameters+=ParameterElement)*)? ')' (('returns'
		//	injected?='injectable'? returnedType=ReturnTypeElement) ('raises' raisedExceptions+=[AbstractException|QualifiedName]
		//	(',' raisedExceptions+=[AbstractException|QualifiedName])*)?);
		@Override public ParserRule getRule() { return rule; }
		
		//docComments+=DocCommentElement* sync?='sync'? query?='query'? name=ID '(' (parameters+=ParameterElement (','
		//parameters+=ParameterElement)*)? ')' (('returns' injected?='injectable'? returnedType=ReturnTypeElement) ('raises'
		//raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?)
		public Group getGroup() { return cGroup; }
		
		//docComments+=DocCommentElement*
		public Assignment getDocCommentsAssignment_0() { return cDocCommentsAssignment_0; }
		
		//DocCommentElement
		public RuleCall getDocCommentsDocCommentElementParserRuleCall_0_0() { return cDocCommentsDocCommentElementParserRuleCall_0_0; }
		
		//sync?='sync'?
		public Assignment getSyncAssignment_1() { return cSyncAssignment_1; }
		
		//'sync'
		public Keyword getSyncSyncKeyword_1_0() { return cSyncSyncKeyword_1_0; }
		
		//query?='query'?
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//'query'
		public Keyword getQueryQueryKeyword_2_0() { return cQueryQueryKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=ParameterElement (',' parameters+=ParameterElement)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=ParameterElement
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//ParameterElement
		public RuleCall getParametersParameterElementParserRuleCall_5_0_0() { return cParametersParameterElementParserRuleCall_5_0_0; }
		
		//(',' parameters+=ParameterElement)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=ParameterElement
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//ParameterElement
		public RuleCall getParametersParameterElementParserRuleCall_5_1_1_0() { return cParametersParameterElementParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//('returns' injected?='injectable'? returnedType=ReturnTypeElement) ('raises'
		//raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'returns' injected?='injectable'? returnedType=ReturnTypeElement
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'returns'
		public Keyword getReturnsKeyword_7_0_0() { return cReturnsKeyword_7_0_0; }
		
		//injected?='injectable'?
		public Assignment getInjectedAssignment_7_0_1() { return cInjectedAssignment_7_0_1; }
		
		//'injectable'
		public Keyword getInjectedInjectableKeyword_7_0_1_0() { return cInjectedInjectableKeyword_7_0_1_0; }
		
		//returnedType=ReturnTypeElement
		public Assignment getReturnedTypeAssignment_7_0_2() { return cReturnedTypeAssignment_7_0_2; }
		
		//ReturnTypeElement
		public RuleCall getReturnedTypeReturnTypeElementParserRuleCall_7_0_2_0() { return cReturnedTypeReturnTypeElementParserRuleCall_7_0_2_0; }
		
		//('raises' raisedExceptions+=[AbstractException|QualifiedName] (','
		//raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'raises'
		public Keyword getRaisesKeyword_7_1_0() { return cRaisesKeyword_7_1_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_7_1_1() { return cRaisedExceptionsAssignment_7_1_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_7_1_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_7_1_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_1_0_1; }
		
		//(',' raisedExceptions+=[AbstractException|QualifiedName])*
		public Group getGroup_7_1_2() { return cGroup_7_1_2; }
		
		//','
		public Keyword getCommaKeyword_7_1_2_0() { return cCommaKeyword_7_1_2_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_7_1_2_1() { return cRaisedExceptionsAssignment_7_1_2_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_7_1_2_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_7_1_2_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_2_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_7_1_2_1_0_1; }
	}
	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cGuidKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cGuidAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cGuidUUID_LITERALTerminalRuleCall_2_1_2_0 = (RuleCall)cGuidAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDataStructDeclarationCrossReference_4_0 = (CrossReference)cDataAssignment_4.eContents().get(0);
		private final RuleCall cDataStructDeclarationQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cDataStructDeclarationCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cSubscribeKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cWithKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Group cGroup_6_0_3 = (Group)cGroup_6_0.eContents().get(3);
		private final Assignment cKeysAssignment_6_0_3_0 = (Assignment)cGroup_6_0_3.eContents().get(0);
		private final RuleCall cKeysKeyElementParserRuleCall_6_0_3_0_0 = (RuleCall)cKeysAssignment_6_0_3_0.eContents().get(0);
		private final Group cGroup_6_0_3_1 = (Group)cGroup_6_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_6_0_3_1_0 = (Keyword)cGroup_6_0_3_1.eContents().get(0);
		private final Assignment cKeysAssignment_6_0_3_1_1 = (Assignment)cGroup_6_0_3_1.eContents().get(1);
		private final RuleCall cKeysKeyElementParserRuleCall_6_0_3_1_1_0 = (RuleCall)cKeysAssignment_6_0_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_0_4 = (Keyword)cGroup_6_0.eContents().get(4);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cRaisesKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_6_1_1_0 = (CrossReference)cRaisedExceptionsAssignment_6_1_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_6_1_1_0.eContents().get(1);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cCommaKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cRaisedExceptionsAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final CrossReference cRaisedExceptionsAbstractExceptionCrossReference_6_1_2_1_0 = (CrossReference)cRaisedExceptionsAssignment_6_1_2_1.eContents().get(0);
		private final RuleCall cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_2_1_0_1 = (RuleCall)cRaisedExceptionsAbstractExceptionCrossReference_6_1_2_1_0.eContents().get(1);
		
		///* event */ EventDeclaration:
		//	'event' name=ID? ('[' ('guid' '=' guid=UUID_LITERAL) ']')? '(' data=[StructDeclaration|QualifiedName] ')'
		//	(('subscribe' 'with' '(' (keys+=KeyElement (',' keys+=KeyElement)*)? ')')? ('raises'
		//	raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?);
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID? ('[' ('guid' '=' guid=UUID_LITERAL) ']')? '(' data=[StructDeclaration|QualifiedName] ')' (('subscribe'
		//'with' '(' (keys+=KeyElement (',' keys+=KeyElement)*)? ')')? ('raises'
		//raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?)
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' ('guid' '=' guid=UUID_LITERAL) ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'guid' '=' guid=UUID_LITERAL
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'guid'
		public Keyword getGuidKeyword_2_1_0() { return cGuidKeyword_2_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1_1() { return cEqualsSignKeyword_2_1_1; }
		
		//guid=UUID_LITERAL
		public Assignment getGuidAssignment_2_1_2() { return cGuidAssignment_2_1_2; }
		
		//UUID_LITERAL
		public RuleCall getGuidUUID_LITERALTerminalRuleCall_2_1_2_0() { return cGuidUUID_LITERALTerminalRuleCall_2_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//data=[StructDeclaration|QualifiedName]
		public Assignment getDataAssignment_4() { return cDataAssignment_4; }
		
		//[StructDeclaration|QualifiedName]
		public CrossReference getDataStructDeclarationCrossReference_4_0() { return cDataStructDeclarationCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getDataStructDeclarationQualifiedNameParserRuleCall_4_0_1() { return cDataStructDeclarationQualifiedNameParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('subscribe' 'with' '(' (keys+=KeyElement (',' keys+=KeyElement)*)? ')')? ('raises'
		//raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//('subscribe' 'with' '(' (keys+=KeyElement (',' keys+=KeyElement)*)? ')')?
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'subscribe'
		public Keyword getSubscribeKeyword_6_0_0() { return cSubscribeKeyword_6_0_0; }
		
		//'with'
		public Keyword getWithKeyword_6_0_1() { return cWithKeyword_6_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0_2() { return cLeftParenthesisKeyword_6_0_2; }
		
		//(keys+=KeyElement (',' keys+=KeyElement)*)?
		public Group getGroup_6_0_3() { return cGroup_6_0_3; }
		
		//keys+=KeyElement
		public Assignment getKeysAssignment_6_0_3_0() { return cKeysAssignment_6_0_3_0; }
		
		//KeyElement
		public RuleCall getKeysKeyElementParserRuleCall_6_0_3_0_0() { return cKeysKeyElementParserRuleCall_6_0_3_0_0; }
		
		//(',' keys+=KeyElement)*
		public Group getGroup_6_0_3_1() { return cGroup_6_0_3_1; }
		
		//','
		public Keyword getCommaKeyword_6_0_3_1_0() { return cCommaKeyword_6_0_3_1_0; }
		
		//keys+=KeyElement
		public Assignment getKeysAssignment_6_0_3_1_1() { return cKeysAssignment_6_0_3_1_1; }
		
		//KeyElement
		public RuleCall getKeysKeyElementParserRuleCall_6_0_3_1_1_0() { return cKeysKeyElementParserRuleCall_6_0_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_0_4() { return cRightParenthesisKeyword_6_0_4; }
		
		//('raises' raisedExceptions+=[AbstractException|QualifiedName] (','
		//raisedExceptions+=[AbstractException|QualifiedName])*)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'raises'
		public Keyword getRaisesKeyword_6_1_0() { return cRaisesKeyword_6_1_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_6_1_1() { return cRaisedExceptionsAssignment_6_1_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_6_1_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_6_1_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_1_0_1; }
		
		//(',' raisedExceptions+=[AbstractException|QualifiedName])*
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }
		
		//','
		public Keyword getCommaKeyword_6_1_2_0() { return cCommaKeyword_6_1_2_0; }
		
		//raisedExceptions+=[AbstractException|QualifiedName]
		public Assignment getRaisedExceptionsAssignment_6_1_2_1() { return cRaisedExceptionsAssignment_6_1_2_1; }
		
		//[AbstractException|QualifiedName]
		public CrossReference getRaisedExceptionsAbstractExceptionCrossReference_6_1_2_1_0() { return cRaisedExceptionsAbstractExceptionCrossReference_6_1_2_1_0; }
		
		//QualifiedName
		public RuleCall getRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_2_1_0_1() { return cRaisedExceptionsAbstractExceptionQualifiedNameParserRuleCall_6_1_2_1_0_1; }
	}
	public class ReturnTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ReturnTypeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cVoidAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cVoidVoidKeyword_1_0 = (Keyword)cVoidAssignment_1.eContents().get(0);
		
		///* returned result of a function */ ReturnTypeElement:
		//	AbstractType | void?='void';
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractType | void?='void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractType
		public RuleCall getAbstractTypeParserRuleCall_0() { return cAbstractTypeParserRuleCall_0; }
		
		//void?='void'
		public Assignment getVoidAssignment_1() { return cVoidAssignment_1; }
		
		//'void'
		public Keyword getVoidVoidKeyword_1_0() { return cVoidVoidKeyword_1_0; }
	}
	public class ParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ParameterElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cParamTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamTypeAbstractTypeParserRuleCall_1_0 = (RuleCall)cParamTypeAssignment_1.eContents().get(0);
		private final Assignment cParamNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamNameIDTerminalRuleCall_2_0 = (RuleCall)cParamNameAssignment_2.eContents().get(0);
		
		///* parameter for a function */ ParameterElement:
		//	direction=ParameterDirection paramType=AbstractType
		//	paramName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ParameterDirection paramType=AbstractType paramName=ID
		public Group getGroup() { return cGroup; }
		
		//direction=ParameterDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ParameterDirection
		public RuleCall getDirectionParameterDirectionEnumRuleCall_0_0() { return cDirectionParameterDirectionEnumRuleCall_0_0; }
		
		//paramType=AbstractType
		public Assignment getParamTypeAssignment_1() { return cParamTypeAssignment_1; }
		
		//AbstractType
		public RuleCall getParamTypeAbstractTypeParserRuleCall_1_0() { return cParamTypeAbstractTypeParserRuleCall_1_0; }
		
		//paramName=ID
		public Assignment getParamNameAssignment_2() { return cParamNameAssignment_2; }
		
		//ID
		public RuleCall getParamNameIDTerminalRuleCall_2_0() { return cParamNameIDTerminalRuleCall_2_0; }
	}
	public class DocCommentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.DocCommentElement");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTextAlternatives_0 = (Alternatives)cTextAssignment.eContents().get(0);
		private final RuleCall cTextSL_DOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cTextAlternatives_0.eContents().get(0);
		private final RuleCall cTextML_DOC_COMMENTTerminalRuleCall_0_1 = (RuleCall)cTextAlternatives_0.eContents().get(1);
		
		///* documentation comment */ DocCommentElement:
		//	text=(SL_DOC_COMMENT | ML_DOC_COMMENT);
		@Override public ParserRule getRule() { return rule; }
		
		//text=(SL_DOC_COMMENT | ML_DOC_COMMENT)
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//(SL_DOC_COMMENT | ML_DOC_COMMENT)
		public Alternatives getTextAlternatives_0() { return cTextAlternatives_0; }
		
		//SL_DOC_COMMENT
		public RuleCall getTextSL_DOC_COMMENTTerminalRuleCall_0_0() { return cTextSL_DOC_COMMENTTerminalRuleCall_0_0; }
		
		//ML_DOC_COMMENT
		public RuleCall getTextML_DOC_COMMENTTerminalRuleCall_0_1() { return cTextML_DOC_COMMENTTerminalRuleCall_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///*
		//--------------------------------------------------------------------------------
		//Primitive data types and other essentials
		//--------------------------------------------------------------------------------
		//*/ QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeIntegerTypeParserRuleCall_0_0 = (RuleCall)cIntegerTypeAssignment_0.eContents().get(0);
		private final Assignment cStringTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeSTRINGTYPETerminalRuleCall_1_0 = (RuleCall)cStringTypeAssignment_1.eContents().get(0);
		private final Assignment cCharTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCharTypeCHARTerminalRuleCall_2_0 = (RuleCall)cCharTypeAssignment_2.eContents().get(0);
		private final Assignment cFloatingPointTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFloatingPointTypeFloatingPointTypeParserRuleCall_3_0 = (RuleCall)cFloatingPointTypeAssignment_3.eContents().get(0);
		private final Assignment cUuidTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cUuidTypeUUIDTerminalRuleCall_4_0 = (RuleCall)cUuidTypeAssignment_4.eContents().get(0);
		private final Assignment cBooleanTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanTypeBOOLEANTerminalRuleCall_5_0 = (RuleCall)cBooleanTypeAssignment_5.eContents().get(0);
		
		//PrimitiveType:
		//	integerType=IntegerType
		//	| stringType=STRINGTYPE
		//	| charType=CHAR
		//	| floatingPointType=FloatingPointType
		//	| uuidType=UUID
		//	| booleanType=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//integerType=IntegerType | stringType=STRINGTYPE | charType=CHAR | floatingPointType=FloatingPointType | uuidType=UUID |
		//booleanType=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integerType=IntegerType
		public Assignment getIntegerTypeAssignment_0() { return cIntegerTypeAssignment_0; }
		
		//IntegerType
		public RuleCall getIntegerTypeIntegerTypeParserRuleCall_0_0() { return cIntegerTypeIntegerTypeParserRuleCall_0_0; }
		
		//stringType=STRINGTYPE
		public Assignment getStringTypeAssignment_1() { return cStringTypeAssignment_1; }
		
		//STRINGTYPE
		public RuleCall getStringTypeSTRINGTYPETerminalRuleCall_1_0() { return cStringTypeSTRINGTYPETerminalRuleCall_1_0; }
		
		//charType=CHAR
		public Assignment getCharTypeAssignment_2() { return cCharTypeAssignment_2; }
		
		//CHAR
		public RuleCall getCharTypeCHARTerminalRuleCall_2_0() { return cCharTypeCHARTerminalRuleCall_2_0; }
		
		//floatingPointType=FloatingPointType
		public Assignment getFloatingPointTypeAssignment_3() { return cFloatingPointTypeAssignment_3; }
		
		//FloatingPointType
		public RuleCall getFloatingPointTypeFloatingPointTypeParserRuleCall_3_0() { return cFloatingPointTypeFloatingPointTypeParserRuleCall_3_0; }
		
		//uuidType=UUID
		public Assignment getUuidTypeAssignment_4() { return cUuidTypeAssignment_4; }
		
		//UUID
		public RuleCall getUuidTypeUUIDTerminalRuleCall_4_0() { return cUuidTypeUUIDTerminalRuleCall_4_0; }
		
		//booleanType=BOOLEAN
		public Assignment getBooleanTypeAssignment_5() { return cBooleanTypeAssignment_5; }
		
		//BOOLEAN
		public RuleCall getBooleanTypeBOOLEANTerminalRuleCall_5_0() { return cBooleanTypeBOOLEANTerminalRuleCall_5_0; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBYTETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINT16TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINT32TerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINT64TerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IntegerType:
		//	BYTE
		//	| INT16
		//	| INT32
		//	| INT64;
		@Override public ParserRule getRule() { return rule; }
		
		//BYTE | INT16 | INT32 | INT64
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BYTE
		public RuleCall getBYTETerminalRuleCall_0() { return cBYTETerminalRuleCall_0; }
		
		//INT16
		public RuleCall getINT16TerminalRuleCall_1() { return cINT16TerminalRuleCall_1; }
		
		//INT32
		public RuleCall getINT32TerminalRuleCall_2() { return cINT32TerminalRuleCall_2; }
		
		//INT64
		public RuleCall getINT64TerminalRuleCall_3() { return cINT64TerminalRuleCall_3; }
	}
	public class FloatingPointTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.FloatingPointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FloatingPointType:
		//	FLOAT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	
	public class ParameterDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ParameterDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPARAM_INEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPARAM_INInKeyword_0_0 = (Keyword)cPARAM_INEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPARAM_OUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPARAM_OUTOutKeyword_1_0 = (Keyword)cPARAM_OUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterDirection:
		//	PARAM_IN='in'
		//	| PARAM_OUT='out';
		public EnumRule getRule() { return rule; }
		
		//PARAM_IN='in' | PARAM_OUT='out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PARAM_IN='in'
		public EnumLiteralDeclaration getPARAM_INEnumLiteralDeclaration_0() { return cPARAM_INEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getPARAM_INInKeyword_0_0() { return cPARAM_INInKeyword_0_0; }
		
		//PARAM_OUT='out'
		public EnumLiteralDeclaration getPARAM_OUTEnumLiteralDeclaration_1() { return cPARAM_OUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getPARAM_OUTOutKeyword_1_0() { return cPARAM_OUTOutKeyword_1_0; }
	}
	
	private final IDLSpecificationElements pIDLSpecification;
	private final ImportDeclarationElements pImportDeclaration;
	private final ModuleDeclarationElements pModuleDeclaration;
	private final AbstractModuleComponentElements pAbstractModuleComponent;
	private final AbstractExceptionElements pAbstractException;
	private final ExceptionReferenceDeclarationElements pExceptionReferenceDeclaration;
	private final ExceptionDeclarationElements pExceptionDeclaration;
	private final AbstractTypeDeclarationElements pAbstractTypeDeclaration;
	private final AbstractCrossReferenceElements pAbstractCrossReference;
	private final AbstractTypeElements pAbstractType;
	private final AliasDeclarationElements pAliasDeclaration;
	private final EnumDeclarationElements pEnumDeclaration;
	private final AbstractCollectionElements pAbstractCollection;
	private final SequenceDeclarationElements pSequenceDeclaration;
	private final AbstractSequenceHintElements pAbstractSequenceHint;
	private final TypicalLengthHintElements pTypicalLengthHint;
	private final TypicalSizeHintElements pTypicalSizeHint;
	private final TupleDeclarationElements pTupleDeclaration;
	private final StructDeclarationElements pStructDeclaration;
	private final MemberElementElements pMemberElement;
	private final KeyElementElements pKeyElement;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final AbstractInterfaceComponentElements pAbstractInterfaceComponent;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final EventDeclarationElements pEventDeclaration;
	private final ReturnTypeElementElements pReturnTypeElement;
	private final ParameterElementElements pParameterElement;
	private final DocCommentElementElements pDocCommentElement;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ParameterDirectionElements eParameterDirection;
	private final PrimitiveTypeElements pPrimitiveType;
	private final IntegerTypeElements pIntegerType;
	private final FloatingPointTypeElements pFloatingPointType;
	private final TerminalRule tBYTE;
	private final TerminalRule tINT16;
	private final TerminalRule tINT32;
	private final TerminalRule tINT64;
	private final TerminalRule tCHAR;
	private final TerminalRule tSTRINGTYPE;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tUUID;
	private final TerminalRule tVERSION;
	private final TerminalRule tUUID_LITERAL;
	private final TerminalRule tML_DOC_COMMENT;
	private final TerminalRule tSL_DOC_COMMENT;
	private final TerminalRule tHEX;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IdlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIDLSpecification = new IDLSpecificationElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pModuleDeclaration = new ModuleDeclarationElements();
		this.pAbstractModuleComponent = new AbstractModuleComponentElements();
		this.pAbstractException = new AbstractExceptionElements();
		this.pExceptionReferenceDeclaration = new ExceptionReferenceDeclarationElements();
		this.pExceptionDeclaration = new ExceptionDeclarationElements();
		this.pAbstractTypeDeclaration = new AbstractTypeDeclarationElements();
		this.pAbstractCrossReference = new AbstractCrossReferenceElements();
		this.pAbstractType = new AbstractTypeElements();
		this.pAliasDeclaration = new AliasDeclarationElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pAbstractCollection = new AbstractCollectionElements();
		this.pSequenceDeclaration = new SequenceDeclarationElements();
		this.pAbstractSequenceHint = new AbstractSequenceHintElements();
		this.pTypicalLengthHint = new TypicalLengthHintElements();
		this.pTypicalSizeHint = new TypicalSizeHintElements();
		this.pTupleDeclaration = new TupleDeclarationElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pMemberElement = new MemberElementElements();
		this.pKeyElement = new KeyElementElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pAbstractInterfaceComponent = new AbstractInterfaceComponentElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pEventDeclaration = new EventDeclarationElements();
		this.pReturnTypeElement = new ReturnTypeElementElements();
		this.pParameterElement = new ParameterElementElements();
		this.pDocCommentElement = new DocCommentElementElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.eParameterDirection = new ParameterDirectionElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pFloatingPointType = new FloatingPointTypeElements();
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.BYTE");
		this.tINT16 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.INT16");
		this.tINT32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.INT32");
		this.tINT64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.INT64");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.CHAR");
		this.tSTRINGTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.STRINGTYPE");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.FLOAT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.BOOLEAN");
		this.tUUID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.UUID");
		this.tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.VERSION");
		this.tUUID_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.UUID_LITERAL");
		this.tML_DOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.ML_DOC_COMMENT");
		this.tSL_DOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.SL_DOC_COMMENT");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.btc.serviceidl.Idl.HEX");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.btc.serviceidl.Idl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* general document structure (root) */ IDLSpecification:
	//	importedEntities+=ImportDeclaration*
	//	modules+=ModuleDeclaration*;
	public IDLSpecificationElements getIDLSpecificationAccess() {
		return pIDLSpecification;
	}
	
	public ParserRule getIDLSpecificationRule() {
		return getIDLSpecificationAccess().getRule();
	}
	
	///* include packages/namespaces/types */ ImportDeclaration:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	///* regular module */ ModuleDeclaration:
	//	virtual?='virtual'? main?='main'? 'module' name=ID '{' moduleComponents+=AbstractModuleComponent*
	//	nestedModules+=ModuleDeclaration* '}';
	public ModuleDeclarationElements getModuleDeclarationAccess() {
		return pModuleDeclaration;
	}
	
	public ParserRule getModuleDeclarationRule() {
		return getModuleDeclarationAccess().getRule();
	}
	
	///* nested components which may occur within a regular module */ AbstractModuleComponent:
	//	EnumDeclaration ';'
	//	| StructDeclaration ';'
	//	| AbstractException ';'
	//	| InterfaceDeclaration ';'
	//	| AliasDeclaration ';';
	public AbstractModuleComponentElements getAbstractModuleComponentAccess() {
		return pAbstractModuleComponent;
	}
	
	public ParserRule getAbstractModuleComponentRule() {
		return getAbstractModuleComponentAccess().getRule();
	}
	
	///* generic exception */ AbstractException:
	//	ExceptionReferenceDeclaration | ExceptionDeclaration;
	public AbstractExceptionElements getAbstractExceptionAccess() {
		return pAbstractException;
	}
	
	public ParserRule getAbstractExceptionRule() {
		return getAbstractExceptionAccess().getRule();
	}
	
	///* exception reference = explicitly provide its origin as file path */ ExceptionReferenceDeclaration:
	//	'exception' name=ID 'ref' location=STRING;
	public ExceptionReferenceDeclarationElements getExceptionReferenceDeclarationAccess() {
		return pExceptionReferenceDeclaration;
	}
	
	public ParserRule getExceptionReferenceDeclarationRule() {
		return getExceptionReferenceDeclarationAccess().getRule();
	}
	
	///* exception */ ExceptionDeclaration:
	//	'exception' name=ID (':' supertype=[AbstractException|QualifiedName])?
	//	'{' (members+=MemberElement ';')* '}';
	public ExceptionDeclarationElements getExceptionDeclarationAccess() {
		return pExceptionDeclaration;
	}
	
	public ParserRule getExceptionDeclarationRule() {
		return getExceptionDeclarationAccess().getRule();
	}
	
	///* generic declaration of new types */ AbstractTypeDeclaration:
	//	AliasDeclaration
	//	| EnumDeclaration
	//	| StructDeclaration
	//	| AbstractException;
	public AbstractTypeDeclarationElements getAbstractTypeDeclarationAccess() {
		return pAbstractTypeDeclaration;
	}
	
	public ParserRule getAbstractTypeDeclarationRule() {
		return getAbstractTypeDeclarationAccess().getRule();
	}
	
	///* previously declared types which can be used in a cross-reference */ AbstractCrossReference:
	//	AliasDeclaration
	//	| EnumDeclaration
	//	| StructDeclaration
	//	| AbstractCollection
	//	| AbstractException;
	public AbstractCrossReferenceElements getAbstractCrossReferenceAccess() {
		return pAbstractCrossReference;
	}
	
	public ParserRule getAbstractCrossReferenceRule() {
		return getAbstractCrossReferenceAccess().getRule();
	}
	
	///* meta type for any usable type */ AbstractType:
	//	primitiveType=PrimitiveType
	//	| referenceType=[AbstractCrossReference|QualifiedName] | collectionType=AbstractCollection;
	public AbstractTypeElements getAbstractTypeAccess() {
		return pAbstractType;
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}
	
	//AliasDeclaration:
	//	'typedef' type=AbstractType name=ID;
	public AliasDeclarationElements getAliasDeclarationAccess() {
		return pAliasDeclaration;
	}
	
	public ParserRule getAliasDeclarationRule() {
		return getAliasDeclarationAccess().getRule();
	}
	
	///* enumeration */ EnumDeclaration:
	//	'enum' name=ID '{' containedIdentifiers+=ID (',' containedIdentifiers+=ID)* '}'
	//	declarator=ID?;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	///* meta type for element containers */ AbstractCollection:
	//	SequenceDeclaration | TupleDeclaration;
	public AbstractCollectionElements getAbstractCollectionAccess() {
		return pAbstractCollection;
	}
	
	public ParserRule getAbstractCollectionRule() {
		return getAbstractCollectionAccess().getRule();
	}
	
	///* sequence */ SequenceDeclaration:
	//	'sequence' '<' (type=AbstractType | failable?='failable' type=AbstractType ('raises'
	//	raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?)
	//	'>' ('[' sequenceHints+=AbstractSequenceHint (',' sequenceHints+=AbstractSequenceHint)* ']')?;
	public SequenceDeclarationElements getSequenceDeclarationAccess() {
		return pSequenceDeclaration;
	}
	
	public ParserRule getSequenceDeclarationRule() {
		return getSequenceDeclarationAccess().getRule();
	}
	
	///* meta type for sequence hint */ AbstractSequenceHint:
	//	TypicalLengthHint | TypicalSizeHint;
	public AbstractSequenceHintElements getAbstractSequenceHintAccess() {
		return pAbstractSequenceHint;
	}
	
	public ParserRule getAbstractSequenceHintRule() {
		return getAbstractSequenceHintAccess().getRule();
	}
	
	///* typical sequence length hint */ TypicalLengthHint:
	//	'typical' 'sequence' 'length' '=' length=INT;
	public TypicalLengthHintElements getTypicalLengthHintAccess() {
		return pTypicalLengthHint;
	}
	
	public ParserRule getTypicalLengthHintRule() {
		return getTypicalLengthHintAccess().getRule();
	}
	
	///* typical element size hint */ TypicalSizeHint:
	//	'typical' 'element' 'size' '=' size=INT;
	public TypicalSizeHintElements getTypicalSizeHintAccess() {
		return pTypicalSizeHint;
	}
	
	public ParserRule getTypicalSizeHintRule() {
		return getTypicalSizeHintAccess().getRule();
	}
	
	///* tuple */ TupleDeclaration:
	//	'tuple' '<' types+=AbstractType (',' types+=AbstractType)* '>';
	public TupleDeclarationElements getTupleDeclarationAccess() {
		return pTupleDeclaration;
	}
	
	public ParserRule getTupleDeclarationRule() {
		return getTupleDeclarationAccess().getRule();
	}
	
	///* struct */ StructDeclaration:
	//	'struct' name=ID (':' supertype=[StructDeclaration|QualifiedName])?
	//	'{' ((members+=MemberElement | typeDecls+=AbstractTypeDeclaration) ';')* '}'
	//	declarator=ID?;
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	///* class member */ MemberElement:
	//	optional?='optional'?
	//	type=AbstractType name=ID;
	public MemberElementElements getMemberElementAccess() {
		return pMemberElement;
	}
	
	public ParserRule getMemberElementRule() {
		return getMemberElementAccess().getRule();
	}
	
	///* key for event subscription */ KeyElement:
	//	type=AbstractType keyName=ID;
	public KeyElementElements getKeyElementAccess() {
		return pKeyElement;
	}
	
	public ParserRule getKeyElementRule() {
		return getKeyElementAccess().getRule();
	}
	
	///* interface */ InterfaceDeclaration:
	//	docComments+=DocCommentElement*
	//	abstract?='abstract'?
	//	'interface' name=ID ('[' (('version' '=' version=VERSION)? & ('guid' '=' guid=UUID_LITERAL)?) ']')? (':'
	//	derivesFrom+=[InterfaceDeclaration|QualifiedName] (',' derivesFrom+=[InterfaceDeclaration|QualifiedName])*)? '{'
	//	contains+=AbstractInterfaceComponent* '}';
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}
	
	///* components which may occur within an interface */ AbstractInterfaceComponent:
	//	AbstractTypeDeclaration ';'
	//	| FunctionDeclaration ';'
	//	| EventDeclaration ';';
	public AbstractInterfaceComponentElements getAbstractInterfaceComponentAccess() {
		return pAbstractInterfaceComponent;
	}
	
	public ParserRule getAbstractInterfaceComponentRule() {
		return getAbstractInterfaceComponentAccess().getRule();
	}
	
	///* function */ FunctionDeclaration:
	//	docComments+=DocCommentElement*
	//	sync?='sync'? query?='query'?
	//	name=ID '(' (parameters+=ParameterElement (',' parameters+=ParameterElement)*)? ')' (('returns'
	//	injected?='injectable'? returnedType=ReturnTypeElement) ('raises' raisedExceptions+=[AbstractException|QualifiedName]
	//	(',' raisedExceptions+=[AbstractException|QualifiedName])*)?);
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	///* event */ EventDeclaration:
	//	'event' name=ID? ('[' ('guid' '=' guid=UUID_LITERAL) ']')? '(' data=[StructDeclaration|QualifiedName] ')'
	//	(('subscribe' 'with' '(' (keys+=KeyElement (',' keys+=KeyElement)*)? ')')? ('raises'
	//	raisedExceptions+=[AbstractException|QualifiedName] (',' raisedExceptions+=[AbstractException|QualifiedName])*)?);
	public EventDeclarationElements getEventDeclarationAccess() {
		return pEventDeclaration;
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	///* returned result of a function */ ReturnTypeElement:
	//	AbstractType | void?='void';
	public ReturnTypeElementElements getReturnTypeElementAccess() {
		return pReturnTypeElement;
	}
	
	public ParserRule getReturnTypeElementRule() {
		return getReturnTypeElementAccess().getRule();
	}
	
	///* parameter for a function */ ParameterElement:
	//	direction=ParameterDirection paramType=AbstractType
	//	paramName=ID;
	public ParameterElementElements getParameterElementAccess() {
		return pParameterElement;
	}
	
	public ParserRule getParameterElementRule() {
		return getParameterElementAccess().getRule();
	}
	
	///* documentation comment */ DocCommentElement:
	//	text=(SL_DOC_COMMENT | ML_DOC_COMMENT);
	public DocCommentElementElements getDocCommentElementAccess() {
		return pDocCommentElement;
	}
	
	public ParserRule getDocCommentElementRule() {
		return getDocCommentElementAccess().getRule();
	}
	
	///*
	//--------------------------------------------------------------------------------
	//Primitive data types and other essentials
	//--------------------------------------------------------------------------------
	//*/ QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//enum ParameterDirection:
	//	PARAM_IN='in'
	//	| PARAM_OUT='out';
	public ParameterDirectionElements getParameterDirectionAccess() {
		return eParameterDirection;
	}
	
	public EnumRule getParameterDirectionRule() {
		return getParameterDirectionAccess().getRule();
	}
	
	//PrimitiveType:
	//	integerType=IntegerType
	//	| stringType=STRINGTYPE
	//	| charType=CHAR
	//	| floatingPointType=FloatingPointType
	//	| uuidType=UUID
	//	| booleanType=BOOLEAN;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//IntegerType:
	//	BYTE
	//	| INT16
	//	| INT32
	//	| INT64;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//FloatingPointType:
	//	FLOAT | DOUBLE;
	public FloatingPointTypeElements getFloatingPointTypeAccess() {
		return pFloatingPointType;
	}
	
	public ParserRule getFloatingPointTypeRule() {
		return getFloatingPointTypeAccess().getRule();
	}
	
	//terminal BYTE:
	//	'byte';
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal INT16:
	//	'int16';
	public TerminalRule getINT16Rule() {
		return tINT16;
	}
	
	//terminal INT32:
	//	'int32';
	public TerminalRule getINT32Rule() {
		return tINT32;
	}
	
	//terminal INT64:
	//	'int64';
	public TerminalRule getINT64Rule() {
		return tINT64;
	}
	
	//terminal CHAR:
	//	'char';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal STRINGTYPE:
	//	'string';
	public TerminalRule getSTRINGTYPERule() {
		return tSTRINGTYPE;
	}
	
	//terminal FLOAT:
	//	'float';
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal DOUBLE:
	//	'double';
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN:
	//	'boolean';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal UUID:
	//	'uuid';
	public TerminalRule getUUIDRule() {
		return tUUID;
	}
	
	//terminal VERSION:
	//	INT '.' INT '.' INT;
	public TerminalRule getVERSIONRule() {
		return tVERSION;
	}
	
	//terminal UUID_LITERAL:
	//	HEX HEX HEX HEX HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX HEX
	//	HEX HEX HEX HEX HEX HEX HEX;
	public TerminalRule getUUID_LITERALRule() {
		return tUUID_LITERAL;
	}
	
	//terminal ML_DOC_COMMENT:
	//	'<#'->'#>';
	public TerminalRule getML_DOC_COMMENTRule() {
		return tML_DOC_COMMENT;
	}
	
	//terminal SL_DOC_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_DOC_COMMENTRule() {
		return tSL_DOC_COMMENT;
	}
	
	//terminal HEX:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
